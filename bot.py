from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from config import TOKEN
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from pyrogram.errors.exceptions.bad_request_400 import PhotoCropSizeSmall

from main import parser, sender_with_photo, new_first_name, new_photo, new_last_name, add_user_to_chat
import os
import sys


class GetChanal(StatesGroup):
    get_chanal = State()


class Sender(StatesGroup):
    get_users = State()
    get_text = State()


class NewFirstName(StatesGroup):
    get_name = State()


class NewLastName(StatesGroup):
    get_name = State()


class NewPhoto(StatesGroup):
    get_photo = State()


class PhotoToSend(StatesGroup):
    get_photo = State()


class AddToChat(StatesGroup):
    get_chat = State()
    get_users = State()


storage = MemoryStorage()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

main_board = ReplyKeyboardMarkup(resize_keyboard=True)
parse_kb = KeyboardButton("üìÑ –ü–∞—Ä—Å–∏–Ω–≥")
sender_kb = KeyboardButton("‚úâ –†–∞—Å—Å—ã–ª–∫–∞")
photo_to_send_kb = KeyboardButton("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
new_first_name_kb = KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è")
new_last_name_kb = KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤—Ç—å –Ω–æ–≤–æ–µ –≤—Ç–æ—Ä–æ–µ –∏–º—è")
new_photo_kb = KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
add_user_to_chat_kb = KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç")
main_board.add(parse_kb, sender_kb).row(new_first_name_kb, new_last_name_kb, new_photo_kb).row(photo_to_send_kb).row(
    add_user_to_chat_kb)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º!",
                        reply_markup=main_board)


@dp.message_handler(commands=['fixer'])
async def process_start_command(message: types.Message):
    os.system("python3 fixer.py")
    raise SystemExit
    


@dp.message_handler()
async def echo_message(msg: types.Message):
    if msg.text == "üìÑ –ü–∞—Ä—Å–∏–Ω–≥":
        await bot.send_message(msg.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç (–±–µ–∑ https://t.me/)")
        await GetChanal.get_chanal.set()
    elif msg.text == "‚úâ –†–∞—Å—Å—ã–ª–∫–∞":
        await bot.send_message(msg.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –Ω–∏–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await Sender.get_users.set()
    elif msg.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–º—è":
        await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")
        await NewFirstName.get_name.set()
    elif msg.text == "–£—Å—Ç–∞–Ω–æ–≤—Ç—å –Ω–æ–≤–æ–µ –≤—Ç–æ—Ä–æ–µ –∏–º—è":
        await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ –∏–º—è")
        await NewLastName.get_name.set()
    elif msg.text == "–£—Å—Ç–∞–Ω–æ–≤—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é":
        await bot.send_message(msg.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ")
        await NewPhoto.get_photo.set()
    elif msg.text == "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏":
        await bot.send_message(msg.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º")
        await PhotoToSend.get_photo.set()
    elif msg.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç":
        await bot.send_message(msg.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç (–±–µ–∑ https://t.me/)")
        await AddToChat.get_chat.set()


@dp.message_handler(state=GetChanal.get_chanal)
async def get_chanal_handler(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è, —ç—Ç–æ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ —Ç–æ –≤—Ä–µ–º—è")
    chanal = message.text
    try:
        await parser(chanal)
        await bot.send_document(message.from_user.id, open(f"{chanal}_members.txt", 'rb'))
    except Exception as e:
        await bot.send_message(message.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —á–∞—Ç–∞")
    await state.finish()


@dp.message_handler(state=Sender.get_users, content_types=['document'])
async def get_users_to_send(message: types.Message, state: FSMContext):
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    with open("users_to_spam.txt", 'wb') as new_file:
        new_file.write(downloaded_file.getvalue())
    await bot.send_message(message.from_user.id,
                           "–û—Ç–ª–∏—á–Ω–æ!\n–ù–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω—ã\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è")
    await state.finish()
    await Sender.get_text.set()


@dp.message_handler(state=Sender.get_text)
async def get_users_to_send(message: types.Message, state: FSMContext):
    text = message.text
    await state.finish()
    await bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")
    await sender_with_photo(text)
    await bot.send_message(message.from_user.id, "–†–∞—Å—Å–ª—ã–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")


@dp.message_handler(state=NewFirstName.get_name)
async def get_new_first_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.finish()
    await new_first_name(name)
    await bot.send_message(message.from_user.id, "–ù–æ–≤–æ–µ –∏–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


@dp.message_handler(state=NewLastName.get_name)
async def get_new_first_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.finish()
    await new_last_name(name)
    await bot.send_message(message.from_user.id, "–ù–æ–≤–æ–µ –≤—Ç–æ—Ä–æ–µ –∏–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


@dp.message_handler(state=NewPhoto.get_photo, content_types=['photo'])
async def get_new_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download('./user_photo.jpg')
    await state.finish()
    try:
        await new_photo()
        await bot.send_message(message.from_user.id, "–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except PhotoCropSizeSmall:
        await bot.send_message(message.from_user.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è")


@dp.message_handler(state=PhotoToSend.get_photo, content_types=['photo'])
async def get_photo_to_send(message: types.Message, state: FSMContext):
    await message.photo[-1].download('./photo_to_send.jpg')
    await state.finish()
    await bot.send_message(message.from_user.id, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º")


@dp.message_handler(state=AddToChat.get_chat)
async def get_chat_name(message: types.Message, state: FSMContext):
    await state.update_data(chanal_name=message.text)
    await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä—å–≤—Ç–µ —Ñ–∞–π–ª —Å –Ω–∏–∫–∞–º–∏")
    await AddToChat.get_users.set()


@dp.message_handler(state=AddToChat.get_users, content_types=['document'])
async def get_users_to_chat(message: types.Message, state: FSMContext):
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    with open("users_to_chat.txt", 'wb') as new_file:
        new_file.write(downloaded_file.getvalue())
    await bot.send_message(message.from_user.id,
                           "–û—Ç–ª–∏—á–Ω–æ!\n–ù–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω—ã")
    data = await state.get_data()
    await state.finish()
    with open("users_to_chat.txt", "r") as f:
        users = f.readlines()
    for user in users:
        try:
            await add_user_to_chat(data["chanal_name"], user)
        except Exception as e:
            await bot.send_message(message.from_user.id,
                                   f"–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—å—Ç–µ —ç—Ç–æ—Ç –Ω–∏–∫")
            await bot.send_message(message.from_user.id, f"Exeption: {e}")

    await bot.send_message(message.from_user.id, "–†–∞–±–æ—Ç–∞ –æ–∫–æ–Ω—á–µ–Ω–∞")


if __name__ == '__main__':
    executor.start_polling(dp)
